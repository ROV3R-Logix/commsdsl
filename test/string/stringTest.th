#include <limits>

#include "CommonTestSuite.h"

class StringTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
};

void StringTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void StringTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void StringTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "String1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 0U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::size_t>::max());

    bbmp::StringField stringField(field);
    TS_ASSERT(stringField.defaultValue().empty());
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), false);
    TS_ASSERT(!stringField.lengthPrefixField().valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
}

void StringTestSuite::test2()
{
    m_status.m_expErrors.push_back(bbmp::ErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "String1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 4U);
    TS_ASSERT_EQUALS(field.maxLength(), 4U);

    bbmp::StringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
    TS_ASSERT_EQUALS(stringField.fixedLength(), 4U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), false);
    TS_ASSERT(!stringField.lengthPrefixField().valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
}

void StringTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "String1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 256U);

    bbmp::StringField stringField(field);
    TS_ASSERT(stringField.defaultValue().empty());
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), true);
    TS_ASSERT(!stringField.hasZeroTermSuffix());

    auto lenField = stringField.lengthPrefixField();
    TS_ASSERT(lenField.valid());
    TS_ASSERT_EQUALS(lenField.kind(), bbmp::Field::Kind::Int);
}

void StringTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "String1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 256U);

    bbmp::StringField stringField(field);
    TS_ASSERT(stringField.defaultValue().empty());
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), true);
    TS_ASSERT(!stringField.hasZeroTermSuffix());

    auto lenField = stringField.lengthPrefixField();
    TS_ASSERT(lenField.valid());
    TS_ASSERT_EQUALS(lenField.kind(), bbmp::Field::Kind::Int);
}

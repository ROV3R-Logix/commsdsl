#include <limits>

#include "CommonTestSuite.h"

class MessageTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
};

void MessageTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void MessageTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void MessageTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 16);
    TS_ASSERT(msg1.fields().empty());
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 10);
    TS_ASSERT(msg2.fields().empty());
    TS_ASSERT_EQUALS(msg2.minLength(), 0U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 0U);
}

void MessageTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 4U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 4U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 1U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 1);
    TS_ASSERT_EQUALS(msg2.minLength(), 8U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 8U);
    auto fields2 = msg2.fields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test3()
{
    m_status.m_expErrors.push_back(bbmp::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 4U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 8U);
    TS_ASSERT_EQUALS(msg1.sinceVersion(), 0U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 1);
    TS_ASSERT_EQUALS(msg2.minLength(), 6U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 6U);
    TS_ASSERT_EQUALS(msg2.sinceVersion(), 2U);
    auto fields2 = msg2.fields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test5()
{
    m_status.m_expErrors.push_back(bbmp::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 8U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 8U);
    TS_ASSERT_EQUALS(msg1.sinceVersion(), 2U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);
    TS_ASSERT_EQUALS(fields1[0].sinceVersion(), 2U);
}

void MessageTestSuite::test7()
{
    m_status.m_expErrors.push_back(bbmp::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
}

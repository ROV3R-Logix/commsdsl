#include <limits>

#include "CommonTestSuite.h"

class ListTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
};

void ListTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void ListTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void ListTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 0U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::size_t>::max());

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 0U);
    TS_ASSERT_EQUALS(listField.hasCountPrefixField(), false);
    TS_ASSERT(!listField.countPrefixField().valid());
    TS_ASSERT_EQUALS(listField.hasLengthPrefixField(), false);
    TS_ASSERT(!listField.lengthPrefixField().valid());
    TS_ASSERT_EQUALS(listField.hasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.elemLengthPrefixField().valid());
    TS_ASSERT(!listField.elemFixedLength());
}

void ListTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 30U);
    TS_ASSERT_EQUALS(field.maxLength(), 30U);

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Bundle);
    TS_ASSERT_EQUALS(listField.fixedCount(), 10U);
    TS_ASSERT_EQUALS(listField.hasCountPrefixField(), false);
    TS_ASSERT(!listField.countPrefixField().valid());
    TS_ASSERT_EQUALS(listField.hasLengthPrefixField(), false);
    TS_ASSERT(!listField.lengthPrefixField().valid());
    TS_ASSERT_EQUALS(listField.hasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.elemLengthPrefixField().valid());
    TS_ASSERT(!listField.elemFixedLength());
}

void ListTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 2U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::uint16_t>::max() * 2U + 2U);

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 0U);
    TS_ASSERT_EQUALS(listField.hasCountPrefixField(), true);
    auto countPrefixField = listField.countPrefixField();
    TS_ASSERT(countPrefixField.valid());
    TS_ASSERT_EQUALS(countPrefixField.minLength(), 2U);
    TS_ASSERT_EQUALS(listField.hasLengthPrefixField(), false);
    TS_ASSERT(!listField.lengthPrefixField().valid());
    TS_ASSERT_EQUALS(listField.hasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.elemLengthPrefixField().valid());
    TS_ASSERT(!listField.elemFixedLength());
}

void ListTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 2U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::uint16_t>::max() + 2U);

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 0U);
    TS_ASSERT_EQUALS(listField.hasCountPrefixField(), false);
    TS_ASSERT(!listField.countPrefixField().valid());
    TS_ASSERT_EQUALS(listField.hasLengthPrefixField(), true);
    TS_ASSERT(listField.lengthPrefixField().valid());
    TS_ASSERT_EQUALS(bbmp::IntField(listField.lengthPrefixField()).endian(), bbmp::Endian_Big);
    TS_ASSERT_EQUALS(listField.hasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.elemLengthPrefixField().valid());
    TS_ASSERT(!listField.elemFixedLength());
}

void ListTestSuite::test5()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 15U);
    TS_ASSERT_EQUALS(field.maxLength(), 15U);

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 5U);
    TS_ASSERT(!listField.hasCountPrefixField());
    TS_ASSERT(!listField.countPrefixField().valid());
    TS_ASSERT(!listField.hasLengthPrefixField());
    TS_ASSERT(!listField.lengthPrefixField().valid());
    TS_ASSERT(listField.hasElemLengthPrefixField());
    TS_ASSERT(listField.elemLengthPrefixField().valid());
    TS_ASSERT(!listField.elemFixedLength());
}

void ListTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 11U);
    TS_ASSERT_EQUALS(field.maxLength(), 11U);

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 5U);
    TS_ASSERT(!listField.hasCountPrefixField());
    TS_ASSERT(!listField.countPrefixField().valid());
    TS_ASSERT(!listField.hasLengthPrefixField());
    TS_ASSERT(!listField.lengthPrefixField().valid());
    TS_ASSERT(listField.hasElemLengthPrefixField());
    TS_ASSERT(listField.elemLengthPrefixField().valid());
    TS_ASSERT(listField.elemFixedLength());
}

void ListTestSuite::test7()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::uint8_t>::max() * 3U + 1U);

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 0U);
    TS_ASSERT(listField.hasCountPrefixField());
    TS_ASSERT(listField.countPrefixField().valid());
    TS_ASSERT(!listField.hasLengthPrefixField());
    TS_ASSERT(!listField.lengthPrefixField().valid());
    TS_ASSERT(listField.hasElemLengthPrefixField());
    TS_ASSERT(listField.elemLengthPrefixField().valid());
    TS_ASSERT(!listField.elemFixedLength());
}

void ListTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::uint8_t>::max() * 2U + 2U);

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 0U);
    TS_ASSERT(listField.hasCountPrefixField());
    TS_ASSERT(listField.countPrefixField().valid());
    TS_ASSERT(!listField.hasLengthPrefixField());
    TS_ASSERT(!listField.lengthPrefixField().valid());
    TS_ASSERT(listField.hasElemLengthPrefixField());
    TS_ASSERT(listField.elemLengthPrefixField().valid());
    TS_ASSERT(listField.elemFixedLength());
}

void ListTestSuite::test9()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::uint8_t>::max() + 1U);

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 0U);
    TS_ASSERT(!listField.hasCountPrefixField());
    TS_ASSERT(!listField.countPrefixField().valid());
    TS_ASSERT(listField.hasLengthPrefixField());
    TS_ASSERT(listField.lengthPrefixField().valid());
    TS_ASSERT(!listField.lengthPrefixField().externalRef().empty());
    TS_ASSERT(listField.hasElemLengthPrefixField());
    TS_ASSERT(listField.elemLengthPrefixField().valid());
    TS_ASSERT(!listField.elemLengthPrefixField().externalRef().empty());
    TS_ASSERT(listField.elemFixedLength());
}

void ListTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "List1");
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::List);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::uint8_t>::max());

    bbmp::ListField listField(field);
    auto elem = listField.elementField();
    TS_ASSERT_EQUALS(elem.kind(), bbmp::Field::Kind::Int);
    TS_ASSERT_EQUALS(listField.fixedCount(), 0U);
    TS_ASSERT(!listField.hasCountPrefixField());
    TS_ASSERT(!listField.countPrefixField().valid());
    TS_ASSERT(listField.hasLengthPrefixField());
    TS_ASSERT(listField.lengthPrefixField().valid());
    TS_ASSERT(!listField.lengthPrefixField().externalRef().empty());
    TS_ASSERT(!listField.hasElemLengthPrefixField());
    TS_ASSERT(!listField.elemLengthPrefixField().valid());
    TS_ASSERT(!listField.elemFixedLength());
}

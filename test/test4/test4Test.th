#include "cxxtest/TestSuite.h"

#include "test4/Message.h"
#include "test4/message/Msg1.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();

    using Interface =
        test4::Message<
            comms::option::IdInfoInterface,
            comms::option::ReadIterator<const std::uint8_t*>,
            comms::option::WriteIterator<std::uint8_t*>,
            comms::option::LengthInfoInterface,
            comms::option::ValidCheckInterface,
            comms::option::NameInterface,
            comms::option::RefreshInterface
        >;

    using Msg1 = test4::message::Msg1<Interface>;

    void polymorphicNameCheck(const Interface& msg, const char* value)
    {
        TS_ASSERT_EQUALS(msg.name(), value);
    }

    void polymorphicLengthCheck(const Interface& msg, std::size_t len)
    {
        TS_ASSERT_EQUALS(msg.length(), len);
    }
};

void TestSuite::test1()
{
    static_assert(test4::message::Msg1Fields<>::F3::isVersionDependent(), "Invalid assumption");
    static_assert(Msg1::areFieldsVersionDependent(), "Invalid Assumption");
    Msg1 msg1;
    polymorphicNameCheck(msg1, "Msg1");
    TS_ASSERT_EQUALS(msg1.field_year().name(), "year");
    TS_ASSERT(msg1.field_year().valid());
    TS_ASSERT(msg1.field_f2().isNull());
    TS_ASSERT(!msg1.field_f3().valid());
    TS_ASSERT_EQUALS(msg1.field_f3().getVersion(), 5U);


    msg1.field_year().value() = 2050;
    TS_ASSERT(!msg1.field_year().valid());

}

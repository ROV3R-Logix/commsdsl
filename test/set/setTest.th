#include <limits>

#include "CommonTestSuite.h"

class SetTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
};

void SetTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void SetTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Set1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::Set);

    bbmp::SetField setField(field);
    auto& bits = setField.bits();
    auto& revBits = setField.revBits();
    TS_ASSERT_EQUALS(setField.type(), bbmp::IntField::Type::Uint8);
    TS_ASSERT_EQUALS(setField.endian(), bbmp::Endian_Big);
    TS_ASSERT_EQUALS(setField.length(), 1U);
    TS_ASSERT_EQUALS(setField.bitLength(), 8U);
    TS_ASSERT_EQUALS(setField.defaultBitValue(), false);
    TS_ASSERT_EQUALS(setField.reservedBitValue(), false);
    TS_ASSERT(!setField.isNonUniqueAllowed());
    TS_ASSERT(setField.isUnique());
    TS_ASSERT_EQUALS(bits.size(), 3);
    TS_ASSERT_EQUALS(revBits.size(), bits.size());
    auto& b1 = bits.find("B1")->second;
    auto& b2 = bits.find("B2")->second;
    auto& b3 = bits.find("B3")->second;
    TS_ASSERT_EQUALS(b1.m_idx, 0);
    TS_ASSERT_EQUALS(b1.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(b1.m_deprecatedSince, bbmp::Protocol::notYetDeprecated());
    TS_ASSERT_EQUALS(b1.m_defaultValue, false);
    TS_ASSERT_EQUALS(b1.m_reserved, false);
    TS_ASSERT_EQUALS(b1.m_reservedValue, false);
    TS_ASSERT_EQUALS(b2.m_idx, 1);
    TS_ASSERT_EQUALS(b2.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(b2.m_deprecatedSince, bbmp::Protocol::notYetDeprecated());
    TS_ASSERT_EQUALS(b2.m_defaultValue, false);
    TS_ASSERT_EQUALS(b2.m_reserved, false);
    TS_ASSERT_EQUALS(b2.m_reservedValue, false);
    TS_ASSERT_EQUALS(b3.m_idx, 2);
    TS_ASSERT_EQUALS(b3.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(b3.m_deprecatedSince, bbmp::Protocol::notYetDeprecated());
    TS_ASSERT_EQUALS(b3.m_defaultValue, false);
    TS_ASSERT_EQUALS(b3.m_reserved, false);
    TS_ASSERT_EQUALS(b3.m_reservedValue, false);
    TS_ASSERT_EQUALS(revBits.find(0)->second, "B1");
    TS_ASSERT_EQUALS(revBits.find(1)->second, "B2");
    TS_ASSERT_EQUALS(revBits.find(2)->second, "B3");
}

void SetTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Set1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::Set);

    bbmp::SetField setField(field);
    auto& bits = setField.bits();
    auto& revBits = setField.revBits();
    TS_ASSERT_EQUALS(setField.type(), bbmp::IntField::Type::Uint16);
    TS_ASSERT_EQUALS(setField.endian(), bbmp::Endian_Big);
    TS_ASSERT_EQUALS(setField.length(), 2U);
    TS_ASSERT_EQUALS(setField.bitLength(), 16U);
    TS_ASSERT_EQUALS(setField.defaultBitValue(), true);
    TS_ASSERT_EQUALS(setField.reservedBitValue(), true);
    TS_ASSERT(!setField.isNonUniqueAllowed());
    TS_ASSERT(setField.isUnique());
    TS_ASSERT_EQUALS(bits.size(), 4);
    TS_ASSERT_EQUALS(revBits.size(), bits.size());
    auto& b1 = bits.find("B1")->second;
    auto& b2 = bits.find("B2")->second;
    auto& b3 = bits.find("B3")->second;
    auto& res1 = bits.find("res1")->second;
    TS_ASSERT_EQUALS(b1.m_idx, 0);
    TS_ASSERT_EQUALS(b1.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(b1.m_deprecatedSince, bbmp::Protocol::notYetDeprecated());
    TS_ASSERT_EQUALS(b1.m_defaultValue, false);
    TS_ASSERT_EQUALS(b1.m_reserved, false);
    TS_ASSERT_EQUALS(b1.m_reservedValue, false);
    TS_ASSERT_EQUALS(b2.m_idx, 2);
    TS_ASSERT_EQUALS(b2.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(b2.m_deprecatedSince, bbmp::Protocol::notYetDeprecated());
    TS_ASSERT_EQUALS(b2.m_defaultValue, true);
    TS_ASSERT_EQUALS(b2.m_reserved, false);
    TS_ASSERT_EQUALS(b2.m_reservedValue, false);
    TS_ASSERT_EQUALS(b3.m_idx, 8);
    TS_ASSERT_EQUALS(b3.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(b3.m_deprecatedSince, bbmp::Protocol::notYetDeprecated());
    TS_ASSERT_EQUALS(b3.m_defaultValue, true);
    TS_ASSERT_EQUALS(b3.m_reserved, false);
    TS_ASSERT_EQUALS(b3.m_reservedValue, false);
    TS_ASSERT_EQUALS(res1.m_idx, 1);
    TS_ASSERT_EQUALS(res1.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(res1.m_deprecatedSince, bbmp::Protocol::notYetDeprecated());
    TS_ASSERT_EQUALS(res1.m_defaultValue, false);
    TS_ASSERT_EQUALS(res1.m_reserved, true);
    TS_ASSERT_EQUALS(res1.m_reservedValue, false);
    TS_ASSERT_EQUALS(revBits.find(0)->second, "B1");
    TS_ASSERT_EQUALS(revBits.find(1)->second, "res1");
    TS_ASSERT_EQUALS(revBits.find(2)->second, "B2");
    TS_ASSERT_EQUALS(revBits.find(8)->second, "B3");
}

void SetTestSuite::test3()
{
    m_status.m_expErrors.push_back(bbmp::ErrorLevel_Error);
    m_status.m_expErrors.push_back(bbmp::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
}

void SetTestSuite::test4()
{
    m_status.m_expErrors.push_back(bbmp::ErrorLevel_Error);
    m_status.m_expErrors.push_back(bbmp::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
}

void SetTestSuite::test5()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Set1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::Set);

    bbmp::SetField setField(field);
    auto& bits = setField.bits();
    auto& revBits = setField.revBits();
    TS_ASSERT_EQUALS(setField.type(), bbmp::IntField::Type::Uint32);
    TS_ASSERT_EQUALS(setField.endian(), bbmp::Endian_Little);
    TS_ASSERT_EQUALS(setField.length(), 3U);
    TS_ASSERT_EQUALS(setField.bitLength(), setField.length() * 8U);
    TS_ASSERT_EQUALS(setField.defaultBitValue(), false);
    TS_ASSERT_EQUALS(setField.reservedBitValue(), false);
    TS_ASSERT(setField.isNonUniqueAllowed());
    TS_ASSERT(!setField.isUnique());
    TS_ASSERT_EQUALS(bits.size(), 5);
    TS_ASSERT_EQUALS(revBits.size(), bits.size());
    auto& b0 = bits.find("B0")->second;
    auto& b2 = bits.find("B2")->second;
    auto& b8 = bits.find("B8")->second;
    auto& b16 = bits.find("B16")->second;
    auto& otherB2 = bits.find("otherB2")->second;
    TS_ASSERT_EQUALS(b0.m_idx, 0);
    TS_ASSERT_EQUALS(b0.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(b0.m_deprecatedSince, bbmp::Protocol::notYetDeprecated());
    TS_ASSERT_EQUALS(b0.m_defaultValue, false);
    TS_ASSERT_EQUALS(b0.m_reserved, false);
    TS_ASSERT_EQUALS(b0.m_reservedValue, false);
    TS_ASSERT_EQUALS(b2.m_idx, 2);
    TS_ASSERT_EQUALS(b8.m_idx, 8);
    TS_ASSERT_EQUALS(b16.m_idx, 16);
    TS_ASSERT_EQUALS(otherB2.m_idx, 2);
    TS_ASSERT_EQUALS(revBits.find(0)->second, "B0");
    TS_ASSERT_EQUALS(revBits.find(8)->second, "B8");
    TS_ASSERT_EQUALS(revBits.find(16)->second, "B16");
    auto revB2 = revBits.equal_range(2);
    TS_ASSERT_EQUALS(std::distance(revB2.first, revB2.second), 2);
}

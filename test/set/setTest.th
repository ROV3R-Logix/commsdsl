#include <limits>

#include "CommonTestSuite.h"

class SetTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void test1();
    void test2();
};

void SetTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void SetTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Set1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::Set);

    bbmp::SetField setField(field);
    auto& bits = setField.bits();
    auto& revBits = setField.revBits();
    TS_ASSERT_EQUALS(setField.type(), bbmp::IntField::Type::Uint8);
    TS_ASSERT_EQUALS(setField.endian(), bbmp::Endian_Big);
    TS_ASSERT_EQUALS(setField.length(), 1U);
    TS_ASSERT_EQUALS(setField.bitLength(), 8U);
    TS_ASSERT_EQUALS(setField.defaultValue(), 0U);
    TS_ASSERT_EQUALS(setField.reservedValue(), 0U);
    TS_ASSERT_EQUALS(setField.reservedBits(), 0xf8);
    TS_ASSERT(!setField.isNonUniqueAllowed());
    TS_ASSERT(setField.isUnique());
    TS_ASSERT_EQUALS(bits.size(), 3);
    TS_ASSERT_EQUALS(revBits.size(), bits.size());
    TS_ASSERT_EQUALS(bits.find("B1")->second, 0);
    TS_ASSERT_EQUALS(bits.find("B2")->second, 1);
    TS_ASSERT_EQUALS(bits.find("B3")->second, 2);
    TS_ASSERT_EQUALS(revBits.find(0)->second, "B1");
    TS_ASSERT_EQUALS(revBits.find(1)->second, "B2");
    TS_ASSERT_EQUALS(revBits.find(2)->second, "B3");
}

void SetTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto& namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto& fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Set1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), bbmp::Field::Kind::Set);

    bbmp::SetField setField(field);
    auto& bits = setField.bits();
    auto& revBits = setField.revBits();
    TS_ASSERT_EQUALS(setField.type(), bbmp::IntField::Type::Uint16);
    TS_ASSERT_EQUALS(setField.endian(), bbmp::Endian_Big);
    TS_ASSERT_EQUALS(setField.length(), 2U);
    TS_ASSERT_EQUALS(setField.bitLength(), 16U);
    TS_ASSERT_EQUALS(setField.defaultValue(), 0xfffc);
    TS_ASSERT_EQUALS(setField.reservedValue(), 0xfef8);
    TS_ASSERT_EQUALS(setField.reservedBits(), 0xfefa);
    TS_ASSERT(!setField.isNonUniqueAllowed());
    TS_ASSERT(setField.isUnique());
    TS_ASSERT_EQUALS(bits.size(), 4);
    TS_ASSERT_EQUALS(revBits.size(), bits.size());
    TS_ASSERT_EQUALS(bits.find("B1")->second, 0);
    TS_ASSERT_EQUALS(bits.find("B2")->second, 2);
    TS_ASSERT_EQUALS(bits.find("B3")->second, 8);
    TS_ASSERT_EQUALS(bits.find("res1")->second, 1);
    TS_ASSERT_EQUALS(revBits.find(0)->second, "B1");
    TS_ASSERT_EQUALS(revBits.find(1)->second, "res1");
    TS_ASSERT_EQUALS(revBits.find(2)->second, "B2");
    TS_ASSERT_EQUALS(revBits.find(8)->second, "B3");
}

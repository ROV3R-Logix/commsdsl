#include <limits>

#include "CommonTestSuite.h"

class MessageTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
};

void MessageTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void MessageTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void MessageTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 16);
    TS_ASSERT(msg1.fields().empty());
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 10);
    TS_ASSERT(msg2.fields().empty());
    TS_ASSERT_EQUALS(msg2.minLength(), 0U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 0U);
}

void MessageTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);
    auto& f1 = fields[0];
    TS_ASSERT_EQUALS(f1.semanticType(), commsdsl::Field::SemanticType::MessageId);

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 4U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 4U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 1U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 1);
    TS_ASSERT_EQUALS(msg2.minLength(), 8U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 8U);
    auto fields2 = msg2.fields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test3()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 4U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 8U);
    TS_ASSERT_EQUALS(msg1.sinceVersion(), 0U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 1);
    TS_ASSERT_EQUALS(msg2.minLength(), 6U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 6U);
    TS_ASSERT_EQUALS(msg2.sinceVersion(), 2U);
    auto fields2 = msg2.fields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test5()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 8U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 8U);
    TS_ASSERT_EQUALS(msg1.sinceVersion(), 2U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);
    TS_ASSERT_EQUALS(fields1[0].sinceVersion(), 2U);
}

void MessageTestSuite::test7()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test8()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test9()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1_1");
    TS_ASSERT_EQUALS(msg1.id(), 0U);
    TS_ASSERT_EQUALS(msg1.order(), 0U);
    TS_ASSERT_EQUALS(msg1.minLength(), 8U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 8U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg1_2");
    TS_ASSERT_EQUALS(msg2.id(), msg1.id());
    TS_ASSERT_EQUALS(msg2.order(), 1U);
    TS_ASSERT_EQUALS(msg2.minLength(), 6U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 6U);
    auto fields2 = msg2.fields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test11()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test12()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0U);
    TS_ASSERT_EQUALS(msg1.order(), 0U);
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);
    TS_ASSERT(msg1.fields().empty());
    auto& extraAttrs = msg1.extraAttributes();
    auto& extraChildren = msg1.extraElements();

    TS_ASSERT_EQUALS(extraAttrs.size(), 1);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "extraAttr");
    TS_ASSERT_EQUALS(extraAttrs.begin()->second, "hello");

    TS_ASSERT_EQUALS(extraChildren.size(), 1);
    TS_TRACE(extraChildren.front());
}

void MessageTestSuite::test13()
{
    m_status.m_preValidateFunc =
        [](commsdsl::Protocol& p)
        {
            p.addExpectedExtraPrefix("prefix.");
        };

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0U);
    TS_ASSERT_EQUALS(msg1.order(), 0U);
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);
    TS_ASSERT(msg1.fields().empty());
    auto& extraAttrs = msg1.extraAttributes();
    auto& extraChildren = msg1.extraElements();

    TS_ASSERT_EQUALS(extraAttrs.size(), 1);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "prefix.extraAttr");
    TS_ASSERT_EQUALS(extraAttrs.begin()->second, "hello");

    TS_ASSERT_EQUALS(extraChildren.size(), 1);
    TS_TRACE(extraChildren.front());
}

void MessageTestSuite::test14()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0U);
    TS_ASSERT_EQUALS(msg1.order(), 0U);
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);
    TS_ASSERT(msg1.fields().empty());
    TS_ASSERT_EQUALS(msg1.description(), "This is multiline description");
}

void MessageTestSuite::test15()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg2.name(), "Msg2");

    auto& platforms1 = msg1.platforms();
    auto& platforms2 = msg2.platforms();

    TS_ASSERT_EQUALS(platforms1.size(), 2U);
    TS_ASSERT_EQUALS(platforms1[0], "p1");
    TS_ASSERT_EQUALS(platforms1[1], "p3");

    TS_ASSERT_EQUALS(platforms2.size(), 1U);
    TS_ASSERT_EQUALS(platforms2[0], "p3");
}

void MessageTestSuite::test16()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test18()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 4U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    auto& msg3 = messages[2];
    auto& msg4 = messages[3];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg3.name(), "Msg3");
    TS_ASSERT_EQUALS(msg4.name(), "Msg4");

    TS_ASSERT_EQUALS(msg1.sender(), commsdsl::Message::Sender::Both);
    TS_ASSERT(!msg1.isCustomizable());

    TS_ASSERT_EQUALS(msg2.sender(), commsdsl::Message::Sender::Both);
    TS_ASSERT(!msg2.isCustomizable());

    TS_ASSERT_EQUALS(msg3.sender(), commsdsl::Message::Sender::Client);
    TS_ASSERT(msg3.isCustomizable());

    TS_ASSERT_EQUALS(msg4.sender(), commsdsl::Message::Sender::Server);
    TS_ASSERT(!msg1.isCustomizable());
}

void MessageTestSuite::test19()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.displayName(), "Message 1");
    TS_ASSERT_EQUALS(msg2.displayName(), "Message 2");
}

void MessageTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.displayName(), "^Msg1Name");
    TS_ASSERT_EQUALS(msg2.displayName(), "^Msg2Name");
}
